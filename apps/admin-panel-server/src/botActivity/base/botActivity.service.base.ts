/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BotActivity as PrismaBotActivity } from "@prisma/client";

export class BotActivityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BotActivityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.botActivity.count(args);
  }

  async botActivities(
    args: Prisma.BotActivityFindManyArgs
  ): Promise<PrismaBotActivity[]> {
    return this.prisma.botActivity.findMany(args);
  }
  async botActivity(
    args: Prisma.BotActivityFindUniqueArgs
  ): Promise<PrismaBotActivity | null> {
    return this.prisma.botActivity.findUnique(args);
  }
  async createBotActivity(
    args: Prisma.BotActivityCreateArgs
  ): Promise<PrismaBotActivity> {
    return this.prisma.botActivity.create(args);
  }
  async updateBotActivity(
    args: Prisma.BotActivityUpdateArgs
  ): Promise<PrismaBotActivity> {
    return this.prisma.botActivity.update(args);
  }
  async deleteBotActivity(
    args: Prisma.BotActivityDeleteArgs
  ): Promise<PrismaBotActivity> {
    return this.prisma.botActivity.delete(args);
  }
}
