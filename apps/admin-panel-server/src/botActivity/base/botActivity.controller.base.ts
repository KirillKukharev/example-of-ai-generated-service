/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BotActivityService } from "../botActivity.service";
import { BotActivityCreateInput } from "./BotActivityCreateInput";
import { BotActivity } from "./BotActivity";
import { BotActivityFindManyArgs } from "./BotActivityFindManyArgs";
import { BotActivityWhereUniqueInput } from "./BotActivityWhereUniqueInput";
import { BotActivityUpdateInput } from "./BotActivityUpdateInput";

export class BotActivityControllerBase {
  constructor(protected readonly service: BotActivityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BotActivity })
  async createBotActivity(
    @common.Body() data: BotActivityCreateInput
  ): Promise<BotActivity> {
    return await this.service.createBotActivity({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        activityType: true,
        details: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BotActivity] })
  @ApiNestedQuery(BotActivityFindManyArgs)
  async botActivities(@common.Req() request: Request): Promise<BotActivity[]> {
    const args = plainToClass(BotActivityFindManyArgs, request.query);
    return this.service.botActivities({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        activityType: true,
        details: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BotActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async botActivity(
    @common.Param() params: BotActivityWhereUniqueInput
  ): Promise<BotActivity | null> {
    const result = await this.service.botActivity({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        activityType: true,
        details: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BotActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBotActivity(
    @common.Param() params: BotActivityWhereUniqueInput,
    @common.Body() data: BotActivityUpdateInput
  ): Promise<BotActivity | null> {
    try {
      return await this.service.updateBotActivity({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          activityType: true,
          details: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BotActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBotActivity(
    @common.Param() params: BotActivityWhereUniqueInput
  ): Promise<BotActivity | null> {
    try {
      return await this.service.deleteBotActivity({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          activityType: true,
          details: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
