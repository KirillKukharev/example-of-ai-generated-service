/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BotActivity } from "./BotActivity";
import { BotActivityCountArgs } from "./BotActivityCountArgs";
import { BotActivityFindManyArgs } from "./BotActivityFindManyArgs";
import { BotActivityFindUniqueArgs } from "./BotActivityFindUniqueArgs";
import { CreateBotActivityArgs } from "./CreateBotActivityArgs";
import { UpdateBotActivityArgs } from "./UpdateBotActivityArgs";
import { DeleteBotActivityArgs } from "./DeleteBotActivityArgs";
import { BotActivityService } from "../botActivity.service";
@graphql.Resolver(() => BotActivity)
export class BotActivityResolverBase {
  constructor(protected readonly service: BotActivityService) {}

  async _botActivitiesMeta(
    @graphql.Args() args: BotActivityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BotActivity])
  async botActivities(
    @graphql.Args() args: BotActivityFindManyArgs
  ): Promise<BotActivity[]> {
    return this.service.botActivities(args);
  }

  @graphql.Query(() => BotActivity, { nullable: true })
  async botActivity(
    @graphql.Args() args: BotActivityFindUniqueArgs
  ): Promise<BotActivity | null> {
    const result = await this.service.botActivity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BotActivity)
  async createBotActivity(
    @graphql.Args() args: CreateBotActivityArgs
  ): Promise<BotActivity> {
    return await this.service.createBotActivity({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BotActivity)
  async updateBotActivity(
    @graphql.Args() args: UpdateBotActivityArgs
  ): Promise<BotActivity | null> {
    try {
      return await this.service.updateBotActivity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BotActivity)
  async deleteBotActivity(
    @graphql.Args() args: DeleteBotActivityArgs
  ): Promise<BotActivity | null> {
    try {
      return await this.service.deleteBotActivity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
